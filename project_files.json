{
  "new_product_descriptions.json": "",
  "function_definition.json": "{\n    \"name\": \"generate_product_description\",\n    \"description\": \"Generuje personalizovaný popis produktu pro všechny věkové skupiny.\",\n    \"parameters\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"product_id\": {\n          \"type\": \"string\",\n          \"description\": \"ID produktu, pro který se má vygenerovat popis\"\n        }\n      },\n      \"required\": [\"product_id\"]\n    },\n    \"returns\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"společné_části\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"základní_informace\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"název_produktu\": {\"type\": \"string\"},\n                \"meta_popis\": {\"type\": \"string\"},\n                \"složení_a_účinky\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"složka\": {\"type\": \"string\"},\n                      \"účinek\": {\"type\": \"string\"}\n                    }\n                  }\n                },\n                \"návod_k_použití\": {\"type\": \"string\"},\n                \"technické_informace\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"velikost_balení\": {\"type\": \"string\"},\n                    \"kód_produktu\": {\"type\": \"string\"},\n                    \"země_původu\": {\"type\": \"string\"},\n                    \"trvanlivost\": {\"type\": \"string\"}\n                  }\n                }\n              }\n            },\n            \"detailní_popis\": {\"type\": \"string\"}\n          }\n        },\n        \"personalizované_části\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"12-17\": {\"$ref\": \"#/definitions/age_group\"},\n            \"18-29\": {\"$ref\": \"#/definitions/age_group\"},\n            \"30-45\": {\"$ref\": \"#/definitions/age_group\"},\n            \"46-60\": {\"$ref\": \"#/definitions/age_group\"},\n            \"61+\": {\"$ref\": \"#/definitions/age_group\"}\n          }\n        }\n      }\n    },\n    \"definitions\": {\n      \"age_group\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"marketingový_obsah\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"rychlý_přehled\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n              \"řeší_tyto_potíže\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n              \"klíčové_benefity\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n              \"proč_zvolit_tento_produkt\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}\n            }\n          },\n          \"doplňující_informace\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"často_kladené_otázky\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"otázka\": {\"type\": \"string\"},\n                    \"odpověď\": {\"type\": \"string\"}\n                  }\n                }\n              },\n              \"rady_expertů\": {\"type\": \"string\"},\n              \"personalizační_prvek\": {\"type\": \"string\"}\n            }\n          },\n          \"recenze_zákazníků\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"jméno\": {\"type\": \"string\"},\n                \"hodnocení\": {\"type\": \"integer\"},\n                \"text\": {\"type\": \"string\"}\n              }\n            }\n          },\n          \"doporučené_produkty\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}\n        }\n      }\n    }\n  }",
  "requirements.txt": "openai>=1.0.0\npython-dotenv==0.19.1",
  "prompt.txt": "Jste generátor popisů produktů pro e-shop specializující se na kosmetiku a zdravotní produkty značky TianDe. Vaším úkolem je vytvářet personalizované, poutavé, přesné a SEO-friendly popisy produktů na základě poskytnutých dat. Každý popis by měl být přizpůsoben specifickým věkovým skupinám: 12-17, 18-29, 30-45, 46-60 a 61+.\n\nPro každý produkt a věkovou skupinu vygenerujte následující:\n\n1. Krátký popis (50-100 slov):\n   - Zdůrazněte klíčové vlastnosti a výhody relevantní pro danou věkovou skupinu\n   - Použijte poutavý jazyk, který osloví potenciální zákazníky v daném věkovém rozmezí\n   - Zahrňte relevantní klíčová slova pro SEO\n\n2. Detailní popis (150-300 slov):\n   - Poskytněte komplexní přehled produktu\n   - Vysvětlete, jak řeší specifické potřeby a obavy dané věkové skupiny\n   - Zdůrazněte jedinečné prodejní body a ingredience\n   - Použijte jazyk a tón odpovídající věkové skupině\n\n3. Seznam problémů (3-5 položek):\n   - Identifikujte konkrétní problémy nebo obavy, které produkt řeší pro danou věkovou skupinu\n\n4. Seznam výhod (3-5 položek):\n   - Vyjmenujte hlavní výhody a pozitivní výsledky používání produktu, přizpůsobené věkové skupině\n\n5. Rychlý přehled (3-5 odrážek):\n   - Shrňte nejdůležitější aspekty produktu pro rychlou orientaci\n\nUjistěte se, že veškerý obsah je faktický, založený na poskytnutých údajích o produktu, a vyhněte se přehánění. Přizpůsobte svůj jazyk a zaměření tak, aby rezonovaly s typickými obavami, životním stylem a prioritami péče o pleť/zdraví každé věkové skupiny.\n\nNezapomeňte zachovat konzistentní hlas značky, který je v souladu s filozofií TianDe kombinující tradiční čínskou medicínu s moderní kosmetickou vědou.",
  "extract_project_code.py": "import os\nimport json\nimport fnmatch\nfrom pathlib import Path\n\ndef load_gitignore(project_path):\n    gitignore_path = os.path.join(project_path, '.gitignore')\n    ignore_patterns = [\n        'venv/', '*.pyc', '__pycache__/', '.env',\n        '*.log', '.idea/', '.vscode/', '*.egg-info/',\n        '.git/'  # Přidáno ignorování složky .git\n    ]\n    if os.path.exists(gitignore_path):\n        with open(gitignore_path, 'r') as f:\n            for line in f:\n                line = line.strip()\n                if line and not line.startswith('#'):\n                    ignore_patterns.append(line)\n    return ignore_patterns\n\ndef should_ignore(path, ignore_patterns, project_path):\n    rel_path = os.path.relpath(path, project_path)\n    for pattern in ignore_patterns:\n        if pattern.endswith('/') and os.path.isdir(path):\n            if fnmatch.fnmatch(rel_path + '/', pattern):\n                return True\n        elif fnmatch.fnmatch(rel_path, pattern):\n            return True\n    return False\n\ndef extract_project_files(project_path):\n    file_contents = {}\n    ignore_patterns = load_gitignore(project_path)\n    \n    for root, dirs, files in os.walk(project_path):\n        dirs[:] = [d for d in dirs if not should_ignore(os.path.join(root, d), ignore_patterns, project_path)]\n        for file in files:\n            file_path = os.path.join(root, file)\n            if not should_ignore(file_path, ignore_patterns, project_path):\n                relative_path = os.path.relpath(file_path, project_path)\n                try:\n                    with open(file_path, 'r', encoding='utf-8') as f:\n                        content = f.read()\n                        file_contents[relative_path] = content\n                except UnicodeDecodeError:\n                    pass  # Tiché přeskočení binárních souborů\n    \n    return file_contents\n\ndef save_project_files(file_contents, output_file):\n    with open(output_file, 'w', encoding='utf-8') as f:\n        json.dump(file_contents, f, indent=2, ensure_ascii=False)\n\nif __name__ == \"__main__\":\n    project_path = os.getcwd()\n    output_file = \"project_files.json\"\n    \n    file_contents = extract_project_files(project_path)\n    save_project_files(file_contents, output_file)\n    \n    print(f\"Project files saved to {output_file}\")",
  ".gitignore": "# Ignorovat celý adresář venv\nvenv/\n\n# Pro případ, že by někdo použil jiný název pro virtuální prostředí\nvirtualenv/\nenv/\n\n# Ignorovat také .pyc soubory a __pycache__ adresáře\n*.pyc\n__pycache__/\n\n# Ignorovat soubory .env, které mohou obsahovat citlivé informace\n.env\n\n# Ignorovat logy\n*.log\n\n# Ignorovat soubory IDE (pro případ, že používáte PyCharm nebo VS Code)\n.idea/\n.vscode/",
  "project_files.json": "{\n  \"new_product_descriptions.json\": \"\",\n  \"function_definition.json\": \"{\\n    \\\"name\\\": \\\"generate_product_description\\\",\\n    \\\"description\\\": \\\"Generuje personalizovaný popis produktu pro všechny věkové skupiny.\\\",\\n    \\\"parameters\\\": {\\n      \\\"type\\\": \\\"object\\\",\\n      \\\"properties\\\": {\\n        \\\"product_id\\\": {\\n          \\\"type\\\": \\\"string\\\",\\n          \\\"description\\\": \\\"ID produktu, pro který se má vygenerovat popis\\\"\\n        }\\n      },\\n      \\\"required\\\": [\\\"product_id\\\"]\\n    },\\n    \\\"returns\\\": {\\n      \\\"type\\\": \\\"object\\\",\\n      \\\"properties\\\": {\\n        \\\"společné_části\\\": {\\n          \\\"type\\\": \\\"object\\\",\\n          \\\"properties\\\": {\\n            \\\"základní_informace\\\": {\\n              \\\"type\\\": \\\"object\\\",\\n              \\\"properties\\\": {\\n                \\\"název_produktu\\\": {\\\"type\\\": \\\"string\\\"},\\n                \\\"meta_popis\\\": {\\\"type\\\": \\\"string\\\"},\\n                \\\"složení_a_účinky\\\": {\\n                  \\\"type\\\": \\\"array\\\",\\n                  \\\"items\\\": {\\n                    \\\"type\\\": \\\"object\\\",\\n                    \\\"properties\\\": {\\n                      \\\"složka\\\": {\\\"type\\\": \\\"string\\\"},\\n                      \\\"účinek\\\": {\\\"type\\\": \\\"string\\\"}\\n                    }\\n                  }\\n                },\\n                \\\"návod_k_použití\\\": {\\\"type\\\": \\\"string\\\"},\\n                \\\"technické_informace\\\": {\\n                  \\\"type\\\": \\\"object\\\",\\n                  \\\"properties\\\": {\\n                    \\\"velikost_balení\\\": {\\\"type\\\": \\\"string\\\"},\\n                    \\\"kód_produktu\\\": {\\\"type\\\": \\\"string\\\"},\\n                    \\\"země_původu\\\": {\\\"type\\\": \\\"string\\\"},\\n                    \\\"trvanlivost\\\": {\\\"type\\\": \\\"string\\\"}\\n                  }\\n                }\\n              }\\n            },\\n            \\\"detailní_popis\\\": {\\\"type\\\": \\\"string\\\"}\\n          }\\n        },\\n        \\\"personalizované_části\\\": {\\n          \\\"type\\\": \\\"object\\\",\\n          \\\"properties\\\": {\\n            \\\"12-17\\\": {\\\"$ref\\\": \\\"#/definitions/age_group\\\"},\\n            \\\"18-29\\\": {\\\"$ref\\\": \\\"#/definitions/age_group\\\"},\\n            \\\"30-45\\\": {\\\"$ref\\\": \\\"#/definitions/age_group\\\"},\\n            \\\"46-60\\\": {\\\"$ref\\\": \\\"#/definitions/age_group\\\"},\\n            \\\"61+\\\": {\\\"$ref\\\": \\\"#/definitions/age_group\\\"}\\n          }\\n        }\\n      }\\n    },\\n    \\\"definitions\\\": {\\n      \\\"age_group\\\": {\\n        \\\"type\\\": \\\"object\\\",\\n        \\\"properties\\\": {\\n          \\\"marketingový_obsah\\\": {\\n            \\\"type\\\": \\\"object\\\",\\n            \\\"properties\\\": {\\n              \\\"rychlý_přehled\\\": {\\\"type\\\": \\\"array\\\", \\\"items\\\": {\\\"type\\\": \\\"string\\\"}},\\n              \\\"řeší_tyto_potíže\\\": {\\\"type\\\": \\\"array\\\", \\\"items\\\": {\\\"type\\\": \\\"string\\\"}},\\n              \\\"klíčové_benefity\\\": {\\\"type\\\": \\\"array\\\", \\\"items\\\": {\\\"type\\\": \\\"string\\\"}},\\n              \\\"proč_zvolit_tento_produkt\\\": {\\\"type\\\": \\\"array\\\", \\\"items\\\": {\\\"type\\\": \\\"string\\\"}}\\n            }\\n          },\\n          \\\"doplňující_informace\\\": {\\n            \\\"type\\\": \\\"object\\\",\\n            \\\"properties\\\": {\\n              \\\"často_kladené_otázky\\\": {\\n                \\\"type\\\": \\\"array\\\",\\n                \\\"items\\\": {\\n                  \\\"type\\\": \\\"object\\\",\\n                  \\\"properties\\\": {\\n                    \\\"otázka\\\": {\\\"type\\\": \\\"string\\\"},\\n                    \\\"odpověď\\\": {\\\"type\\\": \\\"string\\\"}\\n                  }\\n                }\\n              },\\n              \\\"rady_expertů\\\": {\\\"type\\\": \\\"string\\\"},\\n              \\\"personalizační_prvek\\\": {\\\"type\\\": \\\"string\\\"}\\n            }\\n          },\\n          \\\"recenze_zákazníků\\\": {\\n            \\\"type\\\": \\\"array\\\",\\n            \\\"items\\\": {\\n              \\\"type\\\": \\\"object\\\",\\n              \\\"properties\\\": {\\n                \\\"jméno\\\": {\\\"type\\\": \\\"string\\\"},\\n                \\\"hodnocení\\\": {\\\"type\\\": \\\"integer\\\"},\\n                \\\"text\\\": {\\\"type\\\": \\\"string\\\"}\\n              }\\n            }\\n          },\\n          \\\"doporučené_produkty\\\": {\\\"type\\\": \\\"array\\\", \\\"items\\\": {\\\"type\\\": \\\"string\\\"}}\\n        }\\n      }\\n    }\\n  }\",\n  \"requirements.txt\": \"openai==0.27.0\\npython-dotenv==0.19.1\",\n  \"prompt.txt\": \"Jste generátor popisů produktů pro e-shop specializující se na kosmetiku a zdravotní produkty značky TianDe. Vaším úkolem je vytvářet personalizované, poutavé, přesné a SEO-friendly popisy produktů na základě poskytnutých dat. Každý popis by měl být přizpůsoben specifickým věkovým skupinám: 12-17, 18-29, 30-45, 46-60 a 61+.\\n\\nPro každý produkt a věkovou skupinu vygenerujte následující:\\n\\n1. Krátký popis (50-100 slov):\\n   - Zdůrazněte klíčové vlastnosti a výhody relevantní pro danou věkovou skupinu\\n   - Použijte poutavý jazyk, který osloví potenciální zákazníky v daném věkovém rozmezí\\n   - Zahrňte relevantní klíčová slova pro SEO\\n\\n2. Detailní popis (150-300 slov):\\n   - Poskytněte komplexní přehled produktu\\n   - Vysvětlete, jak řeší specifické potřeby a obavy dané věkové skupiny\\n   - Zdůrazněte jedinečné prodejní body a ingredience\\n   - Použijte jazyk a tón odpovídající věkové skupině\\n\\n3. Seznam problémů (3-5 položek):\\n   - Identifikujte konkrétní problémy nebo obavy, které produkt řeší pro danou věkovou skupinu\\n\\n4. Seznam výhod (3-5 položek):\\n   - Vyjmenujte hlavní výhody a pozitivní výsledky používání produktu, přizpůsobené věkové skupině\\n\\n5. Rychlý přehled (3-5 odrážek):\\n   - Shrňte nejdůležitější aspekty produktu pro rychlou orientaci\\n\\nUjistěte se, že veškerý obsah je faktický, založený na poskytnutých údajích o produktu, a vyhněte se přehánění. Přizpůsobte svůj jazyk a zaměření tak, aby rezonovaly s typickými obavami, životním stylem a prioritami péče o pleť/zdraví každé věkové skupiny.\\n\\nNezapomeňte zachovat konzistentní hlas značky, který je v souladu s filozofií TianDe kombinující tradiční čínskou medicínu s moderní kosmetickou vědou.\",\n  \"extract_project_code.py\": \"import os\\nimport json\\nimport fnmatch\\nfrom pathlib import Path\\n\\ndef load_gitignore(project_path):\\n    gitignore_path = os.path.join(project_path, '.gitignore')\\n    ignore_patterns = [\\n        'venv/', '*.pyc', '__pycache__/', '.env',\\n        '*.log', '.idea/', '.vscode/', '*.egg-info/',\\n        '.git/'  # Přidáno ignorování složky .git\\n    ]\\n    if os.path.exists(gitignore_path):\\n        with open(gitignore_path, 'r') as f:\\n            for line in f:\\n                line = line.strip()\\n                if line and not line.startswith('#'):\\n                    ignore_patterns.append(line)\\n    return ignore_patterns\\n\\ndef should_ignore(path, ignore_patterns, project_path):\\n    rel_path = os.path.relpath(path, project_path)\\n    for pattern in ignore_patterns:\\n        if pattern.endswith('/') and os.path.isdir(path):\\n            if fnmatch.fnmatch(rel_path + '/', pattern):\\n                return True\\n        elif fnmatch.fnmatch(rel_path, pattern):\\n            return True\\n    return False\\n\\ndef extract_project_files(project_path):\\n    file_contents = {}\\n    ignore_patterns = load_gitignore(project_path)\\n    \\n    for root, dirs, files in os.walk(project_path):\\n        dirs[:] = [d for d in dirs if not should_ignore(os.path.join(root, d), ignore_patterns, project_path)]\\n        for file in files:\\n            file_path = os.path.join(root, file)\\n            if not should_ignore(file_path, ignore_patterns, project_path):\\n                relative_path = os.path.relpath(file_path, project_path)\\n                try:\\n                    with open(file_path, 'r', encoding='utf-8') as f:\\n                        content = f.read()\\n                        file_contents[relative_path] = content\\n                except UnicodeDecodeError:\\n                    pass  # Tiché přeskočení binárních souborů\\n    \\n    return file_contents\\n\\ndef save_project_files(file_contents, output_file):\\n    with open(output_file, 'w', encoding='utf-8') as f:\\n        json.dump(file_contents, f, indent=2, ensure_ascii=False)\\n\\nif __name__ == \\\"__main__\\\":\\n    project_path = os.getcwd()\\n    output_file = \\\"project_files.json\\\"\\n    \\n    file_contents = extract_project_files(project_path)\\n    save_project_files(file_contents, output_file)\\n    \\n    print(f\\\"Project files saved to {output_file}\\\")\",\n  \".gitignore\": \"# Ignorovat celý adresář venv\\nvenv/\\n\\n# Pro případ, že by někdo použil jiný název pro virtuální prostředí\\nvirtualenv/\\nenv/\\n\\n# Ignorovat také .pyc soubory a __pycache__ adresáře\\n*.pyc\\n__pycache__/\\n\\n# Ignorovat soubory .env, které mohou obsahovat citlivé informace\\n.env\\n\\n# Ignorovat logy\\n*.log\\n\\n# Ignorovat soubory IDE (pro případ, že používáte PyCharm nebo VS Code)\\n.idea/\\n.vscode/\",\n  \"project_files.json\": \"{\\n  \\\"new_product_descriptions.json\\\": \\\"\\\",\\n  \\\"requirements.txt\\\": \\\"openai==0.27.0\\\\npython-dotenv==0.19.1\\\",\\n  \\\"prompt.txt\\\": \\\"\\\",\\n  \\\"extract_project_code.py\\\": \\\"import os\\\\nimport json\\\\nimport fnmatch\\\\nfrom pathlib import Path\\\\n\\\\ndef load_gitignore(project_path):\\\\n    gitignore_path = os.path.join(project_path, '.gitignore')\\\\n    ignore_patterns = [\\\\n        'venv/', '*.pyc', '__pycache__/', '.env',\\\\n        '*.log', '.idea/', '.vscode/', '*.egg-info/',\\\\n        '.git/'  # Přidáno ignorování složky .git\\\\n    ]\\\\n    if os.path.exists(gitignore_path):\\\\n        with open(gitignore_path, 'r') as f:\\\\n            for line in f:\\\\n                line = line.strip()\\\\n                if line and not line.startswith('#'):\\\\n                    ignore_patterns.append(line)\\\\n    return ignore_patterns\\\\n\\\\ndef should_ignore(path, ignore_patterns, project_path):\\\\n    rel_path = os.path.relpath(path, project_path)\\\\n    for pattern in ignore_patterns:\\\\n        if pattern.endswith('/') and os.path.isdir(path):\\\\n            if fnmatch.fnmatch(rel_path + '/', pattern):\\\\n                return True\\\\n        elif fnmatch.fnmatch(rel_path, pattern):\\\\n            return True\\\\n    return False\\\\n\\\\ndef extract_project_files(project_path):\\\\n    file_contents = {}\\\\n    ignore_patterns = load_gitignore(project_path)\\\\n    \\\\n    for root, dirs, files in os.walk(project_path):\\\\n        dirs[:] = [d for d in dirs if not should_ignore(os.path.join(root, d), ignore_patterns, project_path)]\\\\n        for file in files:\\\\n            file_path = os.path.join(root, file)\\\\n            if not should_ignore(file_path, ignore_patterns, project_path):\\\\n                relative_path = os.path.relpath(file_path, project_path)\\\\n                try:\\\\n                    with open(file_path, 'r', encoding='utf-8') as f:\\\\n                        content = f.read()\\\\n                        file_contents[relative_path] = content\\\\n                except UnicodeDecodeError:\\\\n                    pass  # Tiché přeskočení binárních souborů\\\\n    \\\\n    return file_contents\\\\n\\\\ndef save_project_files(file_contents, output_file):\\\\n    with open(output_file, 'w', encoding='utf-8') as f:\\\\n        json.dump(file_contents, f, indent=2, ensure_ascii=False)\\\\n\\\\nif __name__ == \\\\\\\"__main__\\\\\\\":\\\\n    project_path = os.getcwd()\\\\n    output_file = \\\\\\\"project_files.json\\\\\\\"\\\\n    \\\\n    file_contents = extract_project_files(project_path)\\\\n    save_project_files(file_contents, output_file)\\\\n    \\\\n    print(f\\\\\\\"Project files saved to {output_file}\\\\\\\")\\\",\\n  \\\".gitignore\\\": \\\"# Ignorovat celý adresář venv\\\\nvenv/\\\\n\\\\n# Pro případ, že by někdo použil jiný název pro virtuální prostředí\\\\nvirtualenv/\\\\nenv/\\\\n\\\\n# Ignorovat také .pyc soubory a __pycache__ adresáře\\\\n*.pyc\\\\n__pycache__/\\\\n\\\\n# Ignorovat soubory .env, které mohou obsahovat citlivé informace\\\\n.env\\\\n\\\\n# Ignorovat logy\\\\n*.log\\\\n\\\\n# Ignorovat soubory IDE (pro případ, že používáte PyCharm nebo VS Code)\\\\n.idea/\\\\n.vscode/\\\",\\n  \\\"products.json\\\": \\\"\\\",\\n  \\\"setup_assistant.py\\\": \\\"import openai\\\\nimport json\\\\nfrom dotenv import load_dotenv\\\\nimport os\\\\n\\\\n# Načtení proměnných prostředí\\\\nload_dotenv()\\\\n\\\\n# Nastavení API klíče\\\\nopenai.api_key = os.getenv(\\\\\\\"OPENAI_API_KEY\\\\\\\")\\\\n\\\\ndef setup_assistant():\\\\n    # Načtení produktů\\\\n    with open('products.json', 'r', encoding='utf-8') as f:\\\\n        products = json.load(f)\\\\n\\\\n    # Nahrání dat do znalostní báze asistenta\\\\n    file = openai.files.create(\\\\n        file=json.dumps(products, ensure_ascii=False).encode('utf-8'),\\\\n        purpose='assistants'\\\\n    )\\\\n\\\\n    # Vytvoření asistenta\\\\n    assistant = openai.beta.assistants.create(\\\\n        name=\\\\\\\"Product Description Generator\\\\\\\",\\\\n        instructions=\\\\\\\"\\\\\\\"\\\\\\\"\\\\n        You are a product description generator for an e-commerce site. Your task is to create compelling, \\\\n        accurate, and SEO-friendly descriptions for products based on the provided data. Each description should:\\\\n        1. Highlight key features and benefits\\\\n        2. Use engaging language to appeal to potential customers\\\\n        3. Be concise yet informative (aim for 50-100 words)\\\\n        4. Include relevant keywords for SEO\\\\n        5. Be tailored to the product category and target audience\\\\n        Avoid exaggeration and stick to factual information provided in the product data.\\\\n        \\\\\\\"\\\\\\\"\\\\\\\",\\\\n        model=\\\\\\\"gpt-4-1106-preview\\\\\\\",\\\\n        tools=[{\\\\\\\"type\\\\\\\": \\\\\\\"retrieval\\\\\\\"}],\\\\n        file_ids=[file.id]\\\\n    )\\\\n\\\\n    print(f\\\\\\\"Assistant created with ID: {assistant.id}\\\\\\\")\\\\n    return assistant.id\\\\n\\\\nif __name__ == \\\\\\\"__main__\\\\\\\":\\\\n    assistant_id = setup_assistant()\\\\n    # Uložte ID asistenta do souboru pro pozdější použití\\\\n    with open('assistant_id.txt', 'w') as f:\\\\n        f.write(assistant_id)\\\",\\n  \\\"generate_descriptions.py\\\": \\\"import openai\\\\nimport json\\\\nimport time\\\\nfrom dotenv import load_dotenv\\\\nimport os\\\\n\\\\n# Načtení proměnných prostředí\\\\nload_dotenv()\\\\n\\\\n# Nastavení API klíče\\\\nopenai.api_key = os.getenv(\\\\\\\"OPENAI_API_KEY\\\\\\\")\\\\n\\\\ndef generate_description(assistant_id, product):\\\\n    thread = openai.beta.threads.create()\\\\n    \\\\n    openai.beta.threads.messages.create(\\\\n        thread_id=thread.id,\\\\n        role=\\\\\\\"user\\\\\\\",\\\\n        content=f\\\\\\\"Generate a description for this product: {json.dumps(product, ensure_ascii=False)}\\\\\\\"\\\\n    )\\\\n    \\\\n    run = openai.beta.threads.runs.create(\\\\n        thread_id=thread.id,\\\\n        assistant_id=assistant_id\\\\n    )\\\\n    \\\\n    while run.status not in ['completed', 'failed']:\\\\n        time.sleep(1)\\\\n        run = openai.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)\\\\n    \\\\n    if run.status == 'failed':\\\\n        return f\\\\\\\"Error: {run.last_error}\\\\\\\"\\\\n    \\\\n    messages = openai.beta.threads.messages.list(thread_id=thread.id)\\\\n    return messages.data[0].content[0].text.value\\\\n\\\\ndef main():\\\\n    # Načtení ID asistenta\\\\n    with open('assistant_id.txt', 'r') as f:\\\\n        assistant_id = f.read().strip()\\\\n\\\\n    # Načtení produktů\\\\n    with open('products.json', 'r', encoding='utf-8') as f:\\\\n        products = json.load(f)\\\\n\\\\n    # Generování popisů\\\\n    new_descriptions = []\\\\n    for product in products:\\\\n        print(f\\\\\\\"Generating description for product {product['id']}...\\\\\\\")\\\\n        new_description = generate_description(assistant_id, product)\\\\n        new_descriptions.append({\\\\n            \\\\\\\"id\\\\\\\": product[\\\\\\\"id\\\\\\\"],\\\\n            \\\\\\\"original_description\\\\\\\": product.get(\\\\\\\"description\\\\\\\", \\\\\\\"\\\\\\\"),\\\\n            \\\\\\\"new_description\\\\\\\": new_description\\\\n        })\\\\n\\\\n    # Uložení výsledků\\\\n    with open('new_product_descriptions.json', 'w', encoding='utf-8') as f:\\\\n        json.dump(new_descriptions, f, ensure_ascii=False, indent=2)\\\\n\\\\n    print(\\\\\\\"All descriptions generated and saved.\\\\\\\")\\\\n\\\\nif __name__ == \\\\\\\"__main__\\\\\\\":\\\\n    main()\\\"\\n}\",\n  \"products.json\": \"\",\n  \"setup_assistant.py\": \"import openai\\nfrom dotenv import load_dotenv\\nimport os\\n\\nload_dotenv()\\nopenai.api_key = os.getenv(\\\"OPENAI_API_KEY\\\")\\n\\ndef setup_assistant():\\n    # Načtení promptu\\n    with open('prompt.txt', 'r', encoding='utf-8') as f:\\n        prompt = f.read()\\n\\n    # Nahrání XLS souboru do znalostní báze asistenta\\n    file = openai.files.create(\\n        file=open(\\\"products.xls\\\", \\\"rb\\\"),\\n        purpose='assistants'\\n    )\\n\\n    # Vytvoření asistenta\\n    assistant = openai.beta.assistants.create(\\n        name=\\\"Product Description Generator\\\",\\n        instructions=prompt,\\n        model=\\\"gpt-4-1106-preview\\\",\\n        tools=[{\\\"type\\\": \\\"retrieval\\\"}],\\n        file_ids=[file.id]\\n    )\\n\\n    print(f\\\"Assistant created with ID: {assistant.id}\\\")\\n    return assistant.id\\n\\nif __name__ == \\\"__main__\\\":\\n    assistant_id = setup_assistant()\\n    with open('assistant_id.txt', 'w') as f:\\n        f.write(assistant_id)\",\n  \"generate_descriptions.py\": \"import openai\\nimport json\\nimport time\\nfrom dotenv import load_dotenv\\nimport os\\n\\nload_dotenv()\\nopenai.api_key = os.getenv(\\\"OPENAI_API_KEY\\\")\\n\\ndef generate_descriptions(assistant_id, product_ids):\\n    thread = openai.beta.threads.create()\\n    \\n    for product_id in product_ids:\\n        message_content = f\\\"Použijte funkci generate_product_description pro produkt s ID {product_id}\\\"\\n        openai.beta.threads.messages.create(\\n            thread_id=thread.id,\\n            role=\\\"user\\\",\\n            content=message_content\\n        )\\n    \\n    run = openai.beta.threads.runs.create(\\n        thread_id=thread.id,\\n        assistant_id=assistant_id\\n    )\\n    \\n    while run.status not in ['completed', 'failed']:\\n        time.sleep(5)\\n        run = openai.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)\\n    \\n    if run.status == 'failed':\\n        return f\\\"Error: {run.last_error}\\\"\\n    \\n    messages = openai.beta.threads.messages.list(thread_id=thread.id)\\n    return messages.data[0].content[0].text.value\\n\\ndef main():\\n    with open('assistant_id.txt', 'r') as f:\\n        assistant_id = f.read().strip()\\n\\n    product_ids = [\\\"1\\\", \\\"2\\\", \\\"3\\\"]  # Nahraďte skutečnými ID produktů\\n\\n    print(\\\"Generating descriptions...\\\")\\n    descriptions_json = generate_descriptions(assistant_id, product_ids)\\n\\n    with open('new_product_descriptions.json', 'w', encoding='utf-8') as f:\\n        f.write(descriptions_json)\\n\\n    print(\\\"All descriptions generated and saved.\\\")\\n\\nif __name__ == \\\"__main__\\\":\\n    main()\"\n}",
  "products.json": "",
  "setup_assistant.py": "from openai import OpenAI\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\ndef setup_assistant():\n    # Načtení promptu\n    with open('prompt.txt', 'r', encoding='utf-8') as f:\n        prompt = f.read()\n\n    # Nahrání XLS souboru do znalostní báze asistenta\n    file = client.files.create(\n        file=open(\"products.xlsx\", \"rb\"),\n        purpose='assistants'\n    )\n\n    # Vytvoření asistenta\n    assistant = client.beta.assistants.create(\n        name=\"Product Description Generator\",\n        instructions=prompt,\n        model=\"gpt-4-1106-preview\",\n        tools=[{\"type\": \"retrieval\"}]\n    )\n\n    # Přidání souboru k asistentovi\n    client.beta.assistants.add_file(\n        assistant_id=assistant.id,\n        file_id=file.id\n    )\n\n    print(f\"Assistant created with ID: {assistant.id}\")\n    return assistant.id\n\nif __name__ == \"__main__\":\n    assistant_id = setup_assistant()\n    with open('assistant_id.txt', 'w') as f:\n        f.write(assistant_id)",
  "generate_descriptions.py": "import openai\nimport json\nimport time\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n\ndef generate_descriptions(assistant_id, product_ids):\n    thread = openai.beta.threads.create()\n    \n    for product_id in product_ids:\n        message_content = f\"Použijte funkci generate_product_description pro produkt s ID {product_id}\"\n        openai.beta.threads.messages.create(\n            thread_id=thread.id,\n            role=\"user\",\n            content=message_content\n        )\n    \n    run = openai.beta.threads.runs.create(\n        thread_id=thread.id,\n        assistant_id=assistant_id\n    )\n    \n    while run.status not in ['completed', 'failed']:\n        time.sleep(5)\n        run = openai.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)\n    \n    if run.status == 'failed':\n        return f\"Error: {run.last_error}\"\n    \n    messages = openai.beta.threads.messages.list(thread_id=thread.id)\n    return messages.data[0].content[0].text.value\n\ndef main():\n    with open('assistant_id.txt', 'r') as f:\n        assistant_id = f.read().strip()\n\n    product_ids = [\"1\", \"2\", \"3\"]  # Nahraďte skutečnými ID produktů\n\n    print(\"Generating descriptions...\")\n    descriptions_json = generate_descriptions(assistant_id, product_ids)\n\n    with open('new_product_descriptions.json', 'w', encoding='utf-8') as f:\n        f.write(descriptions_json)\n\n    print(\"All descriptions generated and saved.\")\n\nif __name__ == \"__main__\":\n    main()"
}